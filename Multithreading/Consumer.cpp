#include "Consumer.h"

Consumer::Consumer(Producer* producer) : producer(producer), average(0)
{
}

void Consumer::ThreadRoutine()
{
	while (isRunning())
	{
		std::vector<double> data = producer->GetData();
		double avg = accumulate(data.begin(), data.end(), 0.0) / data.size(); //include numeric
		averageMutex.lock();
		average = avg;
		averageMutex.unlock();
		std::this_thread::sleep_for(std::chrono::milliseconds(200));
	}
}
//get some vector generated by some producer, thread must count average and write to synchromesh field in Consumer class

double Consumer::GetAverage()
{
	averageMutex.lock();
	double average = this->average;
	averageMutex.unlock();
	return average;
}